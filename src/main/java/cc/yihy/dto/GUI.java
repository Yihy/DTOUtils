package cc.yihy.dto;

import cc.yihy.dto.bussiness.Converter;
import cc.yihy.dto.entity.ClassProperty;
import cc.yihy.dto.util.ActionUtil;
import com.intellij.ui.JBColor;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by ZyL on 2017/1/22.
 */
public class GUI extends JPanel {
    private JPanel panel1;
    private JButton OKButton;
    private JPanel lpanel;
    private JPanel rpanel;
    private JTextArea textArea1;
    private JLabel label1;
    private JLabel label2;
    private JCheckBox last;
    private JCheckBox secondLast;
    private List<ClassProperty> props1, props2;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setToolTipText("DTOUtils");
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        panel2.add(lpanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.add(rpanel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label1 = new JLabel();
        label1.setText("Entity");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label2 = new JLabel();
        label2.setText("Model");
        panel2.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OKButton = new JButton();
        OKButton.setText("OK");
        panel1.add(OKButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textArea1 = new JTextArea();
        textArea1.setColumns(0);
        textArea1.setLineWrap(true);
        textArea1.setWrapStyleWord(true);
        panel1.add(textArea1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    class OnChecked implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            MyPanel m = (MyPanel) checkBox.getParent();
            int index = m.getIndex();
            MyPanel l = (MyPanel) lpanel.getComponent(index);
            MyPanel r = (MyPanel) rpanel.getComponent(index);
            JCheckBox c1 = (JCheckBox) l.getComponent(0);
            JCheckBox c2 = (JCheckBox) r.getComponent(0);
            c1.setSelected(checkBox.isSelected());
            c2.setSelected(checkBox.isSelected());
            props1.get(index).setEnable(checkBox.isSelected());
            props2.get(index).setEnable(checkBox.isSelected());
        }
    }

    public GUI() {
        props1 = new ArrayList<>();
        props2 = new ArrayList<>();
        $$$setupUI$$$();
        OKButton.addActionListener(e -> {
            String resource = new Converter(props1, props2)
                    .init()
                    .generate();
            textArea1.setText(resource);
        });
        this.setLayout(new BorderLayout());
        this.add(panel1);
    }


    private int indexOf(Container parent, MyPanel panel) {
        for (int i = 0; i < parent.getComponentCount(); i++) {
            MyPanel component = (MyPanel) parent.getComponent(i);
            if (component == panel) {
                return i;
            }
        }
        return -1;
    }

    public void initWorld() {
        if (props1.size() > 0) {
            label1.setText(props1.get(0).getPsiClass().getQualifiedName());
        }
        if (props2.size() > 0) {
            label2.setText(props2.get(0).getPsiClass().getQualifiedName());
        }
        updateWorld();
    }

    public void updateWorld() {
        _updateUI(lpanel, props1, true);
        _updateUI(rpanel, props2, false);
    }

    private void _updateUI(JPanel panel, final List<ClassProperty> props, boolean left) {
        int i = 0;
        panel.removeAll();
        for (final ClassProperty prop : props) {
            JCheckBox check1 = new JCheckBox(prop.getName());
            check1.setSelected(prop.isEnable());
            check1.addActionListener(new OnChecked());
            MyPanel j = new MyPanel();
            j.setIndex(i++);
            FlowLayout f = (FlowLayout) j.getLayout();
            f.setAlignment(FlowLayout.LEFT);
            j.add(check1);
            JButton up = new JButton("↑");
            JButton down = new JButton("↓");
            JButton delete = new JButton("×");
            j.add(up);
            j.add(down);
            j.add(delete);
            if (prop.isPlaceHolder()) {
                check1.setForeground(JBColor.RED);
            }
            panel.add(j);
            delete.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JButton b = (JButton) e.getSource();
                    MyPanel row = (MyPanel) b.getParent();
                    int index = indexOf(row.getParent(), row);
                    props.remove(index);
                    props.add(ActionUtil.newNullProp());
                    updateWorld();
                }
            });

            up.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JButton b = (JButton) e.getSource();
                    MyPanel row = (MyPanel) b.getParent();
                    int index = indexOf(row.getParent(), row);
                    int current = index - 1;
                    if (current < 0) {
                        current = row.getParent().getComponentCount() - 1;
                    }
                    props.remove(index);
                    props.add(current, prop);
                    updateWorld();
                }
            });

            down.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JButton b = (JButton) e.getSource();
                    MyPanel row = (MyPanel) b.getParent();
                    int index = indexOf(row.getParent(), row);
                    int current = index + 1;
                    if (current > row.getParent().getComponentCount() - 1) {
                        current = 0;
                    }
                    props.remove(index);
                    props.add(current, prop);
                    updateWorld();
                }
            });
        }
        panel.updateUI();
    }

    public JPanel getPanel1() {
        return panel1;
    }

    public void drawLine(int x1, int y1, int x2, int y2) {
        ((MyPanel) lpanel).updateGraphics(x1, y1, x2, y2);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        lpanel = new MyPanel();
        lpanel.setLayout(new BoxLayout(lpanel, BoxLayout.Y_AXIS));
        rpanel = new MyPanel();
        rpanel.setLayout(new BoxLayout(rpanel, BoxLayout.Y_AXIS));
    }

    class MyPanel extends JPanel {

        private int index;


        private int x1, y1, x2, y2;

        public int getIndex() {
            return index;
        }

        public void setIndex(int index) {
            this.index = index;
        }

        @Override
        protected void printComponent(Graphics g) {
            super.printComponent(g);
            if (!(x1 == 0 && y1 == 0 && x2 == 0 && y2 == 0)) {
                g.drawLine(x1, y1, x2, y2);
            }
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            if (!(x1 == 0 && y1 == 0 && x2 == 0 && y2 == 0)) {
                g.drawLine(x1, y1, x2, y2);
            }
        }

        public void updateGraphics(int x1, int y1, int x2, int y2) {
            this.x1 = x1;
            this.x2 = x2;
            this.y1 = y1;
            this.y2 = y2;
            repaint();
        }
    }

    public List<ClassProperty> getProps1() {
        return props1;
    }


    public List<ClassProperty> getProps2() {
        return props2;
    }
}
